name: ubuntu build workflows

on:
  push:
    branches: 
      - 'master'
    paths:
      - 'XEngine_Source/**'
      - 'XEngine_Release/**'
      - '.github/**'
  
permissions:
  contents: read
  
jobs:
  build:
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: ubuntu-22.04-arm
          - os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}

    steps:
       # 检出您的主仓库代码
      - name: Checkout main repository code
        uses: actions/checkout@v4
        with:
          ref: 'master'
        
       # 检出依赖的xengine仓库到指定的xengine目录
      - name: Checkout dependency repository (xengine)
        uses: actions/checkout@v4
        with:
          repository: libxengine/libxengine
          path: libxengine

      - name: sub module checkout (opensource)
        run: |
            git submodule init
            git submodule update

      # 设置依赖库的环境变量
      - name: Set up Dependency ubuntu24.04 Environment
        if: matrix.os == 'ubuntu-24.04'
        run: |
            cd libxengine
            chmod 777 *
            sudo ./XEngine_LINEnv.sh -i 3
      - name: Set up Dependency ubuntu24.04 arm64 Environment
        if: matrix.os == 'ubuntu-24.04-arm'
        run: |
            cd libxengine
            chmod 777 *
            sudo ./XEngine_LINEnv.sh -i 0

            latest_tag=$(curl -s https://api.github.com/repos/libxengine/libxengine/releases/latest | jq -r .tag_name)
            wget https://github.com/libxengine/libxengine/releases/download/$latest_tag/XEngine_UBuntu_24.04_Arm64.zip
            unzip ./XEngine_UBuntu_24.04_Arm64.zip -d ./XEngine_UBuntu_24.04_Arm64
            cd XEngine_UBuntu_24.04_Arm64
            
            sudo cp -rf ./XEngine_Include /usr/local/include
            sudo find ./XEngine_Linux -name "*.so" -exec cp {} /usr/local/lib \;         
            sudo ldconfig
      - name: Set up Dependency ubuntu22.04 arm64 Environment
        if: matrix.os == 'ubuntu-22.04-arm'
        run: |
            cd libxengine
            chmod 777 *
            sudo ./XEngine_LINEnv.sh -i 0

            latest_tag=$(curl -s https://api.github.com/repos/libxengine/libxengine/releases/latest | jq -r .tag_name)
            wget https://github.com/libxengine/libxengine/releases/download/$latest_tag/XEngine_UBuntu_22.04_Arm64.zip
            unzip ./XEngine_UBuntu_22.04_Arm64.zip -d ./XEngine_UBuntu_22.04_Arm64
            cd XEngine_UBuntu_22.04_Arm64
            
            sudo cp -rf ./XEngine_Include /usr/local/include
            sudo find ./XEngine_Linux -name "*.so" -exec cp {} /usr/local/lib \;         
            sudo ldconfig
      - name: Set up Dependency ubuntu22.04 Environment
        if: matrix.os == 'ubuntu-22.04'
        run: |
            cd libxengine
            chmod 777 *
            sudo ./XEngine_LINEnv.sh -i 0

            latest_tag=$(curl -s https://api.github.com/repos/libxengine/libxengine/releases/latest | jq -r .tag_name)
            wget https://github.com/libxengine/libxengine/releases/download/$latest_tag/XEngine_UBuntu_22.04_x86-64.zip
            unzip ./XEngine_UBuntu_22.04_x86-64.zip -d ./XEngine_UBuntu_22.04_x86-64
            cd XEngine_UBuntu_22.04_x86-64
            
            sudo cp -rf ./XEngine_Include /usr/local/include
            sudo find ./XEngine_Linux -name "*.so" -exec cp {} /usr/local/lib \;         
            sudo ldconfig
      #编译
      - name: make x86
        if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04' 
        run: | 
            cd XEngine_Source
            make
            make FLAGS=InstallAll
            make FLAGS=CleanAll

            make RELEASE=1
            make FLAGS=InstallAll
            make FLAGS=CleanAll
            cd ..
      - name: make arm
        if: matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'ubuntu-22.04-arm' 
        run: | 
            cd XEngine_Source
            make
            make FLAGS=InstallAll
            make FLAGS=CleanAll

            make ARCH=arm64 RELEASE=1
            make FLAGS=InstallAll
            make FLAGS=CleanAll
            cd ..
      - name: test
        run: |
            cd XEngine_Release
            ./XEngine_CenterApp -t
            ./XEngine_Http2App -t
            ./XEngine_HttpApp -t
            ./XEngine_SimpleApp -t
            ./XEngine_WebSocketApp -t